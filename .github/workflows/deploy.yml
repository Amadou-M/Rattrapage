name: Deploy to EKS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY_BACKEND: jurassic-backend
  ECR_REPOSITORY_FRONTEND: jurassic-frontend
  EKS_CLUSTER: jurassic-eks-cluster
  NAMESPACE: jurassic-app

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ${{ env.AWS_REGION }}
        role-to-assume: arn:aws:iam::<AWS_ACCOUNT_ID>:role/GitHubActionsEKSRole
        role-session-name: GitHubActionsSession

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push backend image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG ./backend
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG
        echo "backend_image=$ECR_REGISTRY/$ECR_REPOSITORY_BACKEND:$IMAGE_TAG" >> $GITHUB_ENV

    - name: Build, tag, and push frontend image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG ./frontend
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG
        echo "frontend_image=$ECR_REGISTRY/$ECR_REPOSITORY_FRONTEND:$IMAGE_TAG" >> $GITHUB_ENV

    - name: Update kubeconfig for EKS
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER }}

    - name: Create Namespace
      run: |
        kubectl apply -f - <<EOF
        apiVersion: v1
        kind: Namespace
        metadata:
          name: ${{ env.NAMESPACE }}
          labels:
            name: ${{ env.NAMESPACE }}
            environment: production
        EOF

    - name: Apply ConfigMap for NGINX
      run: |
        kubectl apply -f - <<EOF
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: frontend-config
          namespace: ${{ env.NAMESPACE }}
        data:
          nginx.conf: |
            events {
                worker_connections 1024;
            }
            http {
                include       /etc/nginx/mime.types;
                default_type  application/octet-stream;
                sendfile on;
                keepalive_timeout 65;
                gzip on;
                gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;
                
                server {
                    listen 80;
                    server_name localhost;
                    root /usr/share/nginx/html;
                    index index.html;
                    
                    location / {
                        try_files $uri $uri/ /index.html;
                    }
                    
                    location /health {
                        access_log off;
                        return 200 "healthy\n";
                        add_header Content-Type text/plain;
                    }
                    location /api {
                        proxy_pass http://jurassic-backend-service:5000;
                        proxy_set_header Host \$host;
                        proxy_set_header X-Real-IP \$remote_addr;
                    }
                }
            }
        EOF

    - name: Deploy Backend to EKS
      run: |
        kubectl apply -f - <<EOF
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: jurassic-backend
          namespace: ${{ env.NAMESPACE }}
          labels:
            app: jurassic-backend
            version: v1
        spec:
          replicas: 3
          strategy:
            type: RollingUpdate
            rollingUpdate:
              maxSurge: 1
              maxUnavailable: 1
          selector:
            matchLabels:
              app: jurassic-backend
          template:
            metadata:
              labels:
                app: jurassic-backend
                version: v1
            spec:
              containers:
              - name: backend
                image: ${{ env.backend_image }}
                imagePullPolicy: Always
                ports:
                - containerPort: 5000
                  name: http
                resources:
                  requests:
                    memory: "128Mi"
                    cpu: "100m"
                  limits:
                    memory: "256Mi"
                    cpu: "200m"
                livenessProbe:
                  httpGet:
                    path: /health
                    port: 5000
                  initialDelaySeconds: 30
                  periodSeconds: 10
                  timeoutSeconds: 5
                  failureThreshold: 3
                readinessProbe:
                  httpGet:
                    path: /health
                    port: 5000
                  initialDelaySeconds: 5
                  periodSeconds: 5
                  timeoutSeconds: 3
                  failureThreshold: 3
                env:
                - name: DB_HOST
                  value: "<RDS_ENDPOINT>"
                - name: DB_USER
                  value: "admin"
                - name: DB_PASSWORD
                  value: "password"
                - name: DB_NAME
                  value: "jurassic_db"
                - name: JWT_SECRET
                  value: "your_jwt_secret"
                - name: NODE_ENV
                  value: "production"
                securityContext:
                  allowPrivilegeEscalation: false
                  runAsNonRoot: true
                  runAsUser: 1000
                  capabilities:
                    drop:
                    - ALL
        ---
        apiVersion: v1
        kind: Service
        metadata:
          name: jurassic-backend-service
          namespace: ${{ env.NAMESPACE }}
          labels:
            app: jurassic-backend
        spec:
          type: ClusterIP
          ports:
          - port: 5000
            targetPort: 5000
            protocol: TCP
            name: http
          selector:
            app: jurassic-backend
        EOF

    - name: Deploy Frontend to EKS
      run: |
        kubectl apply -f - <<EOF
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: jurassic-frontend
          namespace: ${{ env.NAMESPACE }}
          labels:
            app: jurassic-frontend
            version: v1
        spec:
          replicas: 3
          strategy:
            type: RollingUpdate
            rollingUpdate:
              maxSurge: 1
              maxUnavailable: 1
          selector:
            matchLabels:
              app: jurassic-frontend
          template:
            metadata:
              labels:
                app: jurassic-frontend
                version: v1
            spec:
              containers:
              - name: frontend
                image: ${{ env.frontend_image }}
                imagePullPolicy: Always
                ports:
                - containerPort: 80
                  name: http
                resources:
                  requests:
                    memory: "64Mi"
                    cpu: "50m"
                  limits:
                    memory: "128Mi"
                    cpu: "100m"
                livenessProbe:
                  httpGet:
                    path: /health
                    port: 80
                  initialDelaySeconds: 30
                  periodSeconds: 10
                  timeoutSeconds: 5
                  failureThreshold: 3
                readinessProbe:
                  httpGet:
                    path: /health
                    port: 80
                  initialDelaySeconds: 5
                  periodSeconds: 5
                  timeoutSeconds: 3
                  failureThreshold: 3
                env:
                - name: NODE_ENV
                  value: "production"
                securityContext:
                  allowPrivilegeEscalation: false
                  runAsNonRoot: true
                  runAsUser: 101
                  capabilities:
                    drop:
                    - ALL
                volumeMounts:
                - name: nginx-config
                  mountPath: /etc/nginx/nginx.conf
                  subPath: nginx.conf
                  readOnly: true
              volumes:
              - name: nginx-config
                configMap:
                  name: frontend-config
        ---
        apiVersion: v1
        kind: Service
        metadata:
          name: jurassic-frontend-service
          namespace: ${{ env.NAMESPACE }}
          labels:
            app: jurassic-frontend
        spec:
          type: ClusterIP
          ports:
          - port: 80
            targetPort: 80
            protocol: TCP
            name: http
          selector:
            app: jurassic-frontend
        EOF

    - name: Apply Horizontal Pod Autoscaler
      run: |
        kubectl apply -f - <<EOF
        apiVersion: autoscaling/v2
        kind: HorizontalPodAutoscaler
        metadata:
          name: jurassic-frontend-hpa
          namespace: ${{ env.NAMESPACE }}
        spec:
          scaleTargetRef:
            apiVersion: apps/v1
            kind: Deployment
            name: jurassic-frontend
          minReplicas: 3
          maxReplicas: 10
          metrics:
          - type: Resource
            resource:
              name: cpu
              target:
                type: Utilization
                averageUtilization: 70
          - type: Resource
            resource:
              name: memory
              target:
                type: Utilization
                averageUtilization: 80
          behavior:
            scaleDown:
              stabilizationWindowSeconds: 300
              policies:
              - type: Percent
                value: 10
                periodSeconds: 60
            scaleUp:
              stabilizationWindowSeconds: 0
              policies:
              - type: Percent
                value: 100
                periodSeconds: 15
              - type: Pods
                value: 4
                periodSeconds: 15
              selectPolicy: Max
        ---
        apiVersion: autoscaling/v2
        kind: HorizontalPodAutoscaler
        metadata:
          name: jurassic-backend-hpa
          namespace: ${{ env.NAMESPACE }}
        spec:
          scaleTargetRef:
            apiVersion: apps/v1
            kind: Deployment
            name: jurassic-backend
          minReplicas: 3
          maxReplicas: 10
          metrics:
          - type: Resource
            resource:
              name: cpu
              target:
                type: Utilization
                averageUtilization: 70
          - type: Resource
            resource:
              name: memory
              target:
                type: Utilization
                averageUtilization: 80
          behavior:
            scaleDown:
              stabilizationWindowSeconds: 300
              policies:
              - type: Percent
                value: 10
                periodSeconds: 60
            scaleUp:
              stabilizationWindowSeconds: 0
              policies:
              - type: Percent
                value: 100
                periodSeconds: 15
              - type: Pods
                value: 4
                periodSeconds: 15
              selectPolicy: Max
        EOF

    - name: Deploy Ingress to EKS
      run: |
        kubectl apply -f - <<EOF
        apiVersion: networking.k8s.io/v1
        kind: Ingress
        metadata:
          name: jurassic-ingress
          namespace: ${{ env.NAMESPACE }}
          annotations:
            kubernetes.io/ingress.class: "nginx"
            nginx.ingress.kubernetes.io/rewrite-target: /
            nginx.ingress.kubernetes.io/ssl-redirect: "true"
            nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
            cert-manager.io/cluster-issuer: "letsencrypt-prod"
        spec:
          tls:
          - hosts:
            - your-domain.com
            secretName: jurassic-app-tls
          rules:
          - host: your-domain.com
            http:
              paths:
              - path: /
                pathType: Prefix
                backend:
                  service:
                    name: jurassic-frontend-service
                    port:
                      number: 80
              - path: /api
                pathType: Prefix
                backend:
                  service:
                    name: jurassic-backend-service
                    port:
                      number: 5000
        EOF